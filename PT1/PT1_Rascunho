##Palestra Técnica 1: Ferramentas de Gerenciamento de Requisitos

O Tema que escolhermos foi ferramentas de gerenciamento de requisitos, para o desenvolvimento web, uma ferramenta bastante utilizada
 no mundo front-end e back-end é o [Bower](http://bower.io/), porém ainda vamos pesquisar mais ferramentas.

Pesquisar sobre o NodeJS e Grunt, não pude ainda fazer uma busca profunda, mas aparentemente eles pode ser (ou tem ligação) com gerenciamento de requisitos!

##Uma breve história sobre Engenharia de Software

John Tukey, especialista em estatística, em 1958 criou o termo software (SWEBOK,2004). Usando um de seus artigos, citava software como "rotinas interpretativas cuidadosamente planejadas, compiladores, e outros aspectos da programação automativa". 
Segundo Pressman (1995), softwares são "Instruções (programas de computador) que, quando executadas, produzem a função e o desempenho desejados".

O termo Engenharia de Software surgiu ao final da década de 60, em meio a uma crise no desenvolvimento de software. Nesta época, o interesse por métodos padronizados a serem usados no local de trabalho com o intuito de criar aplicações de qualidade, já haviam se tornado um interesse importante para muitas organizações. Abordagens foram definidas para identificar como aprodução de software de qualidade podia ser alcançada nas organizações, visto que a maioria das aplicações foram produzidas naquele tempo sob as regras de desenvolvimento da empresa, nenhuma padronização verdadeira nem qualidade eficiente eram realmente atingíveis paraaplicações de software. De fato, a mistura de novas abordagens e recomendações, possivelmente, somente adicionaram mais confusão e contribuíram ainda mais para à crise na indústria de software (DEEKet al, 2005).

Então, ainda nos anos 60, ocorreram duas importantes conferências - onde originou-se o termo Engenharia de Software - realizadas em reconhecimento à esta crise que estava ocorrendo. Foi uma reação a fracassos de projeto, perdas econômicas, atrasos na entrega, mercados competitivos, e uma exigência crescente para funcionalidade, qualidade, e confiabilidade com menor custo possível(DEEKet al, 2005)

Mas por que raios de se usar o termo Engenharia? 

O termo Engenharia foi usado justamente para associar o "conceito" Engenharia ao desenvolvimento de software, em outras palavrasé ter uma abordagem sistemática, disciplinada e quantificada ao desenvolvimento, operação e manutenção de software(IEEE, 1990).

Segundo ASEE (American Society for Engineering Education), a engenharia é aplicação de princípios matemáticos e científicos, experiência, julgamento e bom senso para trazer coisas que beneficiam as pessoas. A Engenharia de Software segue este mesmo raciocínio, tendo como objetivo definir e exercitar processos, métodos, ferramentas e ambientes para construção de software que satisfaça necessidades de cliente e usuário dentro de prazos e custos previsíveis. 


Engenharia de Software propõe taticas de desenvolvimento, chamadas modelos de ciclo de vida de desenvolvimento de software ou modelos de processo. Estes modelos de ciclo de vida, como o nome diz, ajudam o desenvolvimento do início ao fim do projeto.

##Processos Metódicos

A "Engenharia de Software" compreende um conjunto de etapas que envolvem métodos, ferramentas e procedimentos. Essas etapas muitas vezes são citadas como Paradigmas da Engenharia de Software. Um paradigma de Engenharia de Software é escolhido tendo-se como base a natureza do projeto e da aplicação, os métodos e ferramentas a serem usados, os controles e os produtos que precisam ser entregues. Quatro paradigmas têm sido amplamente discutidos e debatidos: "Ciclo de Vida Clássico" ou "Cascata", "Prototipação", "Modelo Espiral" e "Técnicas de Quarta Geração". Porém, obejetivo desta apresentação não é se aprofundar neste assunto, embora vamos adentrar em uma assunto que combina com todos esses modelos: "Gerenciamento de Requesitos". Segundo, SWEBOK, o guia de uso e aplicação das melhores práticas de Engenharia de Software, informado, sensato e razoável. Ele foi desenvolvido com conhecimentos recolhidos no período de 4 décadas e revisado por inúmeros profissionais de diversos países envolvidos com a Engenharia de Software. Seu principal objetivo foi estabelecer um conjunto apropriado de critérios e normas para a prática profissional da Engenharia
de Software. Neste guia, a Engenharia de Software foi dividida em 10 áreas de pensamento, entre ela está o "Gerenciamento de Requesito".

Paper de referência: http://drc.objectis.net/faculdade-anhanguera-de-anapolis/pos-graduacao/engenharia-de-software/material/07-artigo-eng-sof.pdf
Obs.: Maurício achei bem boa a explanação do artigo sobre "Requisitos de Software" seria uma boa colocá-lo no texto final, mas, queria a opinião de todos. Enfim, ele explica brevimente o que é Requitos funcionais, Requisitos não funcionais, Requesitos inversos; 
Veja o q vcs acham deste vídeo de 1m16s https://www.youtube.com/watch?v=VvMPjNeuDjE


#Requisitos de Software (Resumo)



	Requisitos de Software ou Requisitos do Sistema, de maneira prática, significa aquilo que o programa deve fazer, isto é, o que ele deve devolver quando solicitado e suas restrições.
	Muitas vezes é necessário fazer uma separação no termo Requisitos de sistema, dividindo-o em Requisitos do Usuário e Requisitos do Sistema:
	- Requisito de Usuário: escrever em linguagem “natural” aquilo que é esperado que o programa faça, é ideal também colocar as restrições em que funcionará. Se possível, criar diagramas.
	- Requisito de Sistema: são descrições mais detalhadas do sistema, suas funções e restrições. Segundo Sommerville, a documentação deve conter exatamente o que deve ser implementado e deve fazer parte do contrato entre o comprador e os desenvolvedores.
	É importante separar o nível de detalhes nos requisitos, pois diferentes tipos de leitores precisam entender a descrição do programa. Os requisitos de usuário são úteis para quem não precisa entender como o programa funciona ou como será implementado; já os requisitos de sistema, são úteis para quem desenvolverá o sistema.

	Classificação dos Requisitos de Software:
	- Requisitos Funcionais: são informações sobre o que o programa deve fazer e quais são suas entradas e saídas e também as restrições de maneira detalhada.
  	Erros nesta parte do são comuns, porque é comum algumas descrições de requisitos não sejam precisas e causem erros na hora de implementar. Com estes erros, mais requisitos são acrescentados causando atrasos e aumentando os custos.
	O ideal é que os requisitos sejam completos e consistentes, isto é, sem ambiguidades. Em grandes sistemas é praticamente impossível de consegui e também há muitos stakeholder (pessoas afetadas pelo sistema).
	- Requisitos Não-Funcionais: são os requisitos que não estão diretamente ligados com o que o usuário espera de saída, por exemplo: tempo de resposta do sistema, linguagem em que será programado ou segurança.
	Muitas vezes são mais importantes que os Requisitos funcionais, pois a sua falha causa a inutilidade de todo o sistema.

	**Colocar um exemplo prático de uso**

##Exemplos de Ferramentas

##Bibliografia

SOMMERVILLE,I. Software Engineer, 9a edição, Pearson Education, 2010.
PRESSMAN, R. S.Engenharia de Software. São Paulo: Makron Books, 1995
IEEE.Standard Glossary of Software Engineering Terminology, IEEE std 610.12-1990. Disponível em: <http://www.swen.uwaterloo.ca/~bpekilis/public/SoftwareEngGlossary.pdf>. 


